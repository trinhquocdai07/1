# https://t.me/nguoichoihecaychay
import requests
import time
from colorama import Fore, Style, init
import json
import os

init(autoreset=True)
def clear():
    if os.name == 'nt': 
        os.system('cls')
    else: 
        os.system('clear')

def caychay():
    clear()
    print(Fore.GREEN+Style.BRIGHT+"============[ YesCoin (Gold) ]============")
    print(Fore.GREEN+Style.BRIGHT+"Telegram: https://t.me/nguoichoihecaychay")
    print(Fore.GREEN+Style.BRIGHT + "REF: https://t.me/theYescoin_bot/Yescoin?startapp=KGzVjB")
    print(Fore.GREEN+Style.BRIGHT+"==========================================")

def get_headers(token):
    return {
        'accept': 'application/json, text/plain, */*',
        'accept-language': 'en-US,en;q=0.9',
        'cache-control': 'no-cache',
        'content-type': 'application/json',
        'origin': 'https://www.yescoin.gold',
        'pragma': 'no-cache',
        'priority': 'u=1, i',
        'referer': 'https://www.yescoin.gold/',
        'sec-ch-ua': '"Microsoft Edge";v="125", "Chromium";v="125", "Not.A/Brand";v="24", "Microsoft Edge WebView2";v="125"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': 'Windows',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'token': token,
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0'
    }

def collect_coin(token, amount):
    url = 'https://api.yescoin.gold/game/collectCoin'
    headers = get_headers(token)
    data = json.dumps(amount)  
    try:
        response = requests.post(url, headers=headers, data=data)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            return result
        else:
            return None
    except requests.exceptions.HTTPError as http_err:
        print(f"Đã xảy ra lỗi HTTP: {http_err}")  
        return None
    except Exception as e:
        print(f"Lỗi thu thập xu: {e}")
        return None

def fetch_account_info(token):
    try:
        url = 'https://api.yescoin.gold/account/getAccountInfo'
        headers = get_headers(token)
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        if data['code'] == 0:
            return data
        else:
            return None
    except Exception as e:
        print(f"Không tìm thấy thông tin: {e}")

def fetch_game_info(token):
    try:
        url = 'https://api.yescoin.gold/game/getGameInfo'
        headers = get_headers(token)
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        if data['code'] == 0:
            return data
        else:
            return None
    except Exception as e:
        print(f"Lỗi thông tin game: {e}")

def use_special_box(token):
    url = 'https://api.yescoin.gold/game/recoverSpecialBox'
    headers = get_headers(token)
    try:
        response = requests.post(url, headers=headers)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            print(f"\r[ Chest ] : Activating...", end="", flush=True)
            return True
        else:
            print(f"\r[ Chest ] : Lỗi activate", end="", flush=True)
            return False
    except Exception as e:
        print(f"\r[ Chest ] : Error", flush=True)
        return False
    
def fetch_special_box_info(token):
    try:
        url = 'https://api.yescoin.gold/game/getSpecialBoxInfo'
        headers = get_headers(token)
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        if data['code'] == 0:
            return data
        else:
            return None
    except Exception as e:
        print(f"Không tìm thấy rương: {e}")


def get_my_user_nick(token):
    try:
        url = 'https://api.yescoin.gold/account/getRankingList?index=1&pageSize=1&rankType=1&userLevel=1'
        headers = get_headers(token)
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        if 'myUserNick' in data['data'] and data['data']['myUserNick']:
            return data['data']['myUserNick']
        else:
            return "no nickname"
    except Exception as e:
        print(f"Lỗi không tìm thấy user: {e}")


def collect_from_special_box(token, box_type, coin_count):
    url = 'https://api.yescoin.gold/game/collectSpecialBoxCoin'
    headers = get_headers(token)
    data = json.dumps({"boxType": box_type, "coinCount": coin_count})
    try:
        response = requests.post(url, headers=headers, data=data)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            if result['data']['collectStatus']:
                print(f"\r[ Chest ] : Collected {result['data']['collectAmount']} Coins", flush=True)
          
                return True, result['data']['collectAmount']
            else:
                print(f"\r[ Chest ] : Không có rương          ", flush=True)
                return True, 0
        else:
            print(f"\r[ Chest ] : Lỗi nhặt coins: {result['message']}", end="", flush=True)
            return False, 0
    except Exception as e:
        print(f"\r[ Chest ] : Error: {e}", flush=True)
        return False, 0

def attempt_collect_special_box(token, box_type, initial_coin_count):
    coin_count = initial_coin_count
    while coin_count > 0:
        success, collected_amount = collect_from_special_box(token, box_type, coin_count)
        if success:
            return collected_amount
        coin_count -= 10  
    print(f"\r[ Chest ] : Không thể thu nhập coins", flush=True)
    return 0



def fetch_account_build_info(token):
    try:
        url = 'https://api.yescoin.gold/build/getAccountBuildInfo'
        headers = get_headers(token)
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        
        if data['code'] == 0:
            # print(data)
            return data

        else:
            return None
    except Exception as e:
        print(f"Lỗi get thông tin user: {e}")


def fetch_squad_info(token):
    url = 'https://api.yescoin.gold/squad/mySquad'
    headers = get_headers(token)
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        if data['code'] == 0:
            return data
        else:
            return None
    except Exception as e:
        print(f"Không tìm thấy thông tin team: {e}")
        return None
    
def join_squad(token, squad_link):
    url = 'https://api.yescoin.gold/squad/joinSquad'
    headers = get_headers(token)
    data = json.dumps({"squadTgLink": squad_link})
    try:
        response = requests.post(url, headers=headers, data=data)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            return result
        else:
            return None
    except Exception as e:
        print(f"Lỗi tham gia Team: {e}")
        return None

def recover_coin_pool(token):
    url = 'https://api.yescoin.gold/game/recoverCoinPool'
    headers = get_headers(token)
    try:
        response = requests.post(url, headers=headers)
        response.raise_for_status()
        result = response.json()
        if result['code'] == 0:
            print(f"\r[ Recovery ] : Success               ", flush=True)
            return True
        else:
            print(f"\r[ Recovery ] : Fail", flush=True)
            return False
    except Exception as e:
        print(f"\r[ Recovery ] : Error: {e}", flush=True)
        return False
    
def load_tokens(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            tokens = file.read().splitlines()
        return tokens
    else:
        print(f"File tokens_yescoin.txt không tồn tại")
        exit()

def main():
    thoigiancho=int(input("Nhập thời gian chờ (nên để trên 1200): "))
    tokens = load_tokens('tokens_yescoin.txt')
    while True:
        caychay()
        for index, token in enumerate(tokens):
            nickname = get_my_user_nick(token)
            print(f"\n========[ User {index + 1} | {nickname} ]========")
            print(f"\r[ Squad ] : Getting...", end="", flush=True)
            squad_info = fetch_squad_info(token)
   
            print(f"\r[ Balance ] : Getting...", end="", flush=True)
            balance = fetch_account_info(token)
            if balance is None:
                print(f"\r[ Balance ] : Không thể lấy thông tin coins", flush=True)
                continue
            else:
                balance = balance.get('data', {}).get('currentAmount', 0)
                balance = f"{balance:,}".replace(',', '.')
                print(f"\r[ Balance ] : {balance}           ", flush=True)
            
            print(f"\r[ Game Info ] : Getting...", end="", flush=True)
            game_info = fetch_account_build_info(token)
            if game_info is None:
                print(f"\r[ Game Info ] : Lỗi lấy thông tin dữ liệu", flush=True)
                continue
            else:
                special_box_left_recovery_count = game_info['data'].get('specialBoxLeftRecoveryCount', 0)
                coin_pool_left_recovery_count = game_info['data'].get('coinPoolLeftRecoveryCount', 0)
                single_coin_value = game_info['data'].get('singleCoinValue', 0)
                single_coin_level = game_info['data'].get('singleCoinLevel', 0)
                coin_pool_recovery_speed = game_info['data'].get('coinPoolRecoverySpeed', 0)
                print(f"\r[ Booster ] : Rương: {special_box_left_recovery_count} | Phục hồi: {coin_pool_left_recovery_count}", flush=True)
                print(f"\r[ Multivalue ] : Level {single_coin_value}", flush=True)
                print(f"\r[ Coin Limit ] : Level {single_coin_level}", flush=True)
                print(f"\r[ Fill Rate ] : Level {coin_pool_recovery_speed}", flush=True)
            print(f"\r[ Game Info ] : Getting...", end="", flush=True)
            collect_info = fetch_game_info(token)
            if collect_info is None:
                print(f"\r[ Game Info ] : Lỗi lấy thông tin dữ liệu", flush=True)
                continue
            else:
                single_coin_value = collect_info['data'].get('singleCoinValue', 0)
                coin_pool_left_count = collect_info['data'].get('coinPoolLeftCount', 0)
                print(f"\r[ Coin Left ] : {coin_pool_left_count}              ", flush=True)
                
                print(f"\r[ Collect ] : Đang nhận coins...", end="", flush=True)
                if coin_pool_left_count > 0:
                    amount =  coin_pool_left_count // single_coin_value
                    collect_result = collect_coin(token, amount)
                    if collect_result and collect_result.get('code') == 0:
                        collected_amount = collect_result['data']['collectAmount']
                        print(f"\r[ Collect ] : Nhận {collected_amount}           ", flush=True)
                    else:
                        print(f"\r[ Collect ] : Lỗi nhận coins", flush=True)
            
            
            print(f"\r[ Chest ] : Load Chest...", end="", flush=True)
            if game_info and game_info['data'].get('specialBoxLeftRecoveryCount', 0) > 0:
                if use_special_box(token):
                    print(f"\r[ Chest ] : Collecting...", end="", flush=True)
                    collected_amount = attempt_collect_special_box(token, 2, 240)  # Contoh: box_type=2, coin_count=250
            else:
                print(f"\r[ Chest ] : Không có rương          ", flush=True)
            time.sleep(2)
            print(f"\r[ Recovery ] : Load recover...", end="", flush=True)
            game_info = fetch_account_build_info(token)
            if game_info and game_info['data'].get('coinPoolLeftRecoveryCount', 0) > 0:
                if recover_coin_pool(token):
                    # Setelah pemulihan, coba kumpulkan koin lagi
                    collect_info = fetch_game_info(token)
                    if collect_info:
                        coin_pool_left_count = collect_info['data'].get('coinPoolLeftCount', 0)
                        if coin_pool_left_count > 0:
                            amount = coin_pool_left_count // game_info['data'].get('singleCoinValue', 1)
                            collect_result = collect_coin(token, amount)
                            if collect_result and collect_result.get('code') == 0:
                                collected_amount = collect_result['data']['collectAmount']
                                print(f"\r[ Collect ] : Thu nhập thành công {collected_amount} coins", flush=True)
                            else:
                                print(f"\r[ Collect ] : Không thể nhận coins", flush=True)
            else:
                print(f"\r[ Recovery ] : Phục hồi hết", flush=True)
            time.sleep(2)
            print(f"\r[ Free Chest ] : Load collect..", end="", flush=True)
            collected_amount = attempt_collect_special_box(token, 1, 230) 
            time.sleep(2)
        print(f"\n=========Đã chạy xong=========", end="", flush=True)
        import sys
        for nguoichoihecaychay in range(thoigiancho, 0, -1):
            sys.stdout.write(f"\rVui lòng đợi {nguoichoihecaychay // 60} phút {nguoichoihecaychay % 60} giây")
            sys.stdout.flush()
            time.sleep(1)
        clear()        
            
    
        

if __name__ == '__main__':
    main()
