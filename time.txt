# https://t.me/nguoichoihecaychay
import os
import sys
import json
import time
import random
import requests
from base64 import b64decode
from datetime import datetime
from urllib.parse import unquote
from colorama import Fore, Style
from random_user_agent.user_agent import UserAgent
from random_user_agent.params import SoftwareName, OperatingSystem


def caychay():
    print(Fore.GREEN + Style.BRIGHT + "============[ PocketFi ]============")
    print("Telegram: https://t.me/nguoichoihecaychay")
    print("REF: https://t.me/pocketfi_bot/Mining?startapp=5124217416")
    print("====================================")

class TimeFarm:
    def __init__(self):
        self.headers = {
            "Host": "tg-bot-tap.laborx.io",
            "Connection": "keep-alive",
            "User-Agent": "",
            "Content-Type": "text/plain;charset=UTF-8",
            "Accept": "*/*",
            "Origin": "https://tg-tap-miniapp.laborx.io",
            "X-Requested-With": "org.telegram.messenger",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Dest": "empty",
            "Referer": "https://tg-tap-miniapp.laborx.io/",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "en,en-US;q=0.9",
        }

    def cvdate(self, date):
        return datetime.strptime(date, "%a, %d %b %Y %H:%M:%S %Z").timestamp()

    def get_ua(self):
        software = [SoftwareName.CHROME.value, SoftwareName.EDGE.value,]
        operating = [
            OperatingSystem.ANDROID.value,
            OperatingSystem.WINDOWS.value,
            OperatingSystem.IOS.value,
        ]
        uar = UserAgent(software_names=software, operating_systems=operating, limit=100)
        ua = uar.get_random_user_agent()
        return ua

    def get_farming(self, token):
        url = "https://tg-bot-tap.laborx.io/api/v1/farming/info"
        headers = self.headers.copy()
        headers["Authorization"] = f"Bearer {token}"
        res = self.http(url, headers)
        balance = res.json()["balance"]
        self.log("[ Balance ] " + str(balance))
        start_farming = res.json()["activeFarmingStartedAt"]
        if start_farming is None:
            url_start = "https://tg-bot-tap.laborx.io/api/v1/farming/start"
            data = json.dumps({})
            res = self.http(url_start, headers, data)
            now = self.cvdate(res.headers["Date"])
            start_farming = res.json()["activeFarmingStartedAt"].replace("Z", "")
            start_farming_ts = int(datetime.fromisoformat(start_farming).timestamp())
            farming_duration = res.json()["farmingDurationInSec"]
            end_farming = start_farming_ts + farming_duration
            end_farming_iso = datetime.fromtimestamp(end_farming)
            countdown = end_farming - now
            self.log("[ TIME ] Kết thúc farming vào lúc: " + str(end_farming_iso))
            return countdown
        
        start_farming = start_farming.replace("Z", "")
        start_farming_ts = int(datetime.fromisoformat(start_farming).timestamp())
        farming_duration = res.json()["farmingDurationInSec"]
        end_farming = start_farming_ts + farming_duration
        end_farming_iso = datetime.fromtimestamp(end_farming)
        now = self.cvdate(res.headers["Date"])
        countdown = end_farming - now
        if now > end_farming:
            self.log("Farming đã kết thúc")
            url_finish = "https://tg-bot-tap.laborx.io/api/v1/farming/finish"
            data = json.dumps({})
            headers["Content-Length"] = str(len(data))
            res = self.http(url_finish, headers, data)
            balance = res.json()["balance"]
            self.log("balance after farming: " + str(balance))
            url_start = "https://tg-bot-tap.laborx.io/api/v1/farming/start"
            res = self.http(url_start, headers, data)
            now = self.cvdate(res.headers["Date"])
            start_farming = res.json()["activeFarmingStartedAt"].replace("Z", "")
            start_farming_ts = int(datetime.fromisoformat(start_farming).timestamp())
            farming_duration = res.json()["farmingDurationInSec"]
            end_farming = start_farming_ts + farming_duration
            end_farming_iso = datetime.fromtimestamp(end_farming)
            countdown = end_farming - now
            self.log("Kết thúc farming vào lúc: " + str(end_farming_iso))
            return countdown

        self.log("[ INFO ] Đang Farming!")
        self.log("Kết thúc farming vào lúc: " + str(end_farming_iso))
        return countdown

    def get_token(self, tg_data):
        url = "https://tg-bot-tap.laborx.io/api/v1/auth/validate-init"
        headers = self.headers.copy()
        res = self.http(url, headers, tg_data)
        if "token" not in res.json().keys():
            self.log("Lỗi token, vui lòng kiểm tra lại!")
            return False
        
        self.log("[ NOTI ] Get token thành công!")
        token = res.json()["token"]
        return token

    def parsing(self, data):
        ret = {}
        for i in unquote(data).split("&"):
            key, value = i.split("=")
            ret[key] = value

        return ret

    def token_checker(self, token):
        header, payload, sign = token.split(".")
        depayload = b64decode(payload + "==")
        jeload = json.loads(depayload)
        expired = jeload["exp"]
        now = int(datetime.now().timestamp())
        if now > int(expired):
            return False
        return True

    def main(self):
        arg = sys.argv
        os.system("cls" if os.name == "nt" else "clear")
        caychay()
        while True:
            list_countdown = []
            datas = open("queryid_timefarm.txt", "r").read().splitlines()
            tokens = json.loads(open("token_timefarm.json", "r").read())
            self.log(f'[ TOTAL ACCOUNT ]: {len(datas)}')
            for data in datas:
                parser = self.parsing(data)
                user = json.loads(parser["user"])
                userid = str(user["id"])
                if userid not in tokens.keys():
                    user_ua = self.get_ua()
                    self.headers["User-Agent"] = user_ua
                    user_token = self.get_token(data)
                    if user_token is False:
                        continue
                    tokens[userid] = {}
                    tokens[userid]["token"] = user_token
                    tokens[userid]["ua"] = user_ua
                    open("token_timefarm.json","w").write(json.dumps(tokens,indent=4))
                user_token = tokens[userid]["token"]
                user_ua = tokens[userid]["ua"]
                is_expired = self.token_checker(user_token)
                if is_expired is False:
                    self.headers["User-Agent"] = user_ua
                    user_token = self.get_token(data)
                    if user_token is False:
                        continue
                    tokens[userid]["token"] = user_token
                    open("tokens.json", "w").write(json.dumps(tokens, indent=4))
                self.log(f"[ USER ] {user['first_name']}")
                curse = self.get_farming(user_token)
                list_countdown.append(curse)
                print(Fore.GREEN + Style.BRIGHT +"====================================")
                self.countdown(5)
            
            min_countdown = min(list_countdown)
            self.countdown(int(min_countdown))

    def countdown(self, t):
        while t:
            minutes, seconds = divmod(t, 60)
            hours, minutes = divmod(minutes, 60)
            hours = str(hours).zfill(2)
            minutes = str(minutes).zfill(2)
            seconds = str(seconds).zfill(2)
            print(f"Vui lòng chờ {hours}:{minutes}:{seconds} ", flush=True, end="\r")
            t -= 1
            time.sleep(1)
        print("                          ", flush=True, end="\r")

    def http(self, url, headers, data=None):
        while True:
            try:
                if data is None:
                    headers["Content-Length"] = "0"
                    res = requests.get(url, headers=headers)
                    open('http.log','a',encoding='utf-8').write(res.text + '\n')
                    return res

                if data == "":
                    res = requests.post(url, headers=headers)
                    open('http.log','a',encoding='utf-8').write(res.text + '\n')
                    return res

                res = requests.post(url, headers=headers, data=data)
                open('http.log','a',encoding='utf-8').write(res.text + '\n')
                return res
            except (
                requests.exceptions.ConnectionError,
                requests.exceptions.ConnectTimeout,
                requests.exceptions.ReadTimeout,
                requests.exceptions.ConnectTimeout,
            ):
                self.log("Connection error / timeout!")
                time.sleep(2)
                continue

    def log(self, msg):
        print(Fore.WHITE + f"{msg}")


if __name__ == "__main__":
    try:
        app = TimeFarm()
        app.main()
    except KeyboardInterrupt:
        sys.exit()
