import os
import sys
import time
import requests
from datetime import datetime
from colorama import Fore, Style

script_dir = os.path.dirname(os.path.realpath(__file__))
data_file = os.path.join(script_dir, "queryid_pocketfi.txt")

def clear_terminal():
    if os.name == "nt":
        _ = os.system("cls")
    else:
        _ = os.system("clear")

def caychay():
    print(Fore.GREEN + Style.BRIGHT + "============[ PocketFi ]============")
    print("Telegram: https://t.me/nguoichoihecaychay")
    print("REF: https://t.me/pocketfi_bot/Mining?startapp=5124217416")
    print("====================================")

class Pocketfi:
    def __init__(self):
        self.headers = {
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.9",
            "Connection": "keep-alive",
            "Host": "rubot.pocketfi.org",
            "Origin": "https://pocketfi.app",
            "Referer": "https://pocketfi.app/",
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "cross-site",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0",
            "sec-ch-ua": '"Microsoft Edge";v="125", "Chromium";v="125", "Not.A/Brand";v="24", "Microsoft Edge WebView2";v="125"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"',
        }

    def next_claim_is(self, last_claim):
        next_claim = last_claim + 3650
        now = datetime.now().timestamp()
        tetod = round(next_claim - now)
        return tetod

    def http(self, url, headers, data=None):
        while True:
            try:
                if data is None:
                    res = requests.get(url, headers=headers)
                    return res

                if data == "":
                    res = requests.post(url, headers=headers)
                    return res

                res = requests.post(url, headers=headers, data=data)
                return res

            except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
                self.log("Lỗi kết nối")
                time.sleep(1)
                continue

    def countdown(self, t):
        while t:
            phut, giay = divmod(t, 60)
            gio, phut = divmod(phut, 60)
            gio = str(gio).zfill(2)
            phut = str(phut).zfill(2)
            giay = str(giay).zfill(2)
            print(f"Vui lòng đợi: {gio}:{phut}:{giay} ", flush=True, end="\r")
            t -= 1
            time.sleep(1)
        print("                          ", flush=True, end="\r")

    def log(self, msg):
        print(Fore.WHITE + f"{msg}")

    def get_user_mining(self, tg_data):
        url = "https://rubot.pocketfi.org/mining/getUserMining"
        url_claim = "https://rubot.pocketfi.org/mining/claimMining"
        headers = self.headers.copy()
        headers["telegramRawData"] = tg_data
        res = self.http(url, headers)
        balance = res.json()["userMining"]["gotAmount"]
        last_claim = res.json()["userMining"]["dttmLastClaim"] / 1000
        self.log(f"[ Balance ] : {balance}")
        can_claim = self.next_claim_is(last_claim)
        if can_claim >= 0:
            self.log(f"[ NOTI ] Nhận quá sớm")
            return can_claim

        res = self.http(url_claim, headers, "")
        new_balance = res.json()["userMining"]["gotAmount"]
        self.log(f"[ Balance After ] : {new_balance}")
        return 7200

    def main(self):
        if not os.path.isfile(data_file):
            print(f"Không tìm thấy file {data_file}.")
            sys.exit(1)

        clear_terminal()
        caychay()
        datas = open(data_file, "r").read().splitlines()
        self.log(f"[ Total Account ] : {len(datas)}")
        while True:
            list_countdown = []
            _start = int(time.time())
            for no, data in enumerate(datas):
                self.log(f"[ Account ] : {no + 1}/{len(datas)}")
                res = self.get_user_mining(data)
                list_countdown.append(res)
            _end = int(time.time())
            _tot = _end - _start
            if _tot <= 0:
                continue

            _min = min(list_countdown) - _tot
            self.countdown(_min)

if __name__ == "__main__":
    try:
        pocketfi = Pocketfi()
        pocketfi.main()
    except KeyboardInterrupt:
        sys.exit()
